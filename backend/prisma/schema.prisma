generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  avatarUrl String?
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  messages Message[]         @relation("UserMessages")
  chats    ChatParticipant[]
  likes    Like[]

  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")
}

model Post {
  postId    Int      @id @default(autoincrement())
  title     String
  content   String
  imageUrl  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [userId])

  comments Comment[]
  likes    Like[]
}

model Comment {
  commentId Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [userId])

  postId Int
  post   Post @relation(fields: [postId], references: [postId])

  likes Like[]
}

model Like {
  likeId    Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [userId])

  postId Int?
  post   Post? @relation(fields: [postId], references: [postId])

  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [commentId])
}

model Chat {
  chatId       Int               @id @default(autoincrement())
  createdAt    DateTime          @default(now())
  messages     Message[]
  participants ChatParticipant[]
}

model ChatParticipant {
  chatParticipantId Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [userId])

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [chatId])

  @@unique([userId, chatId])
  @@index([chatId])
}

model Message {
  messageId Int      @id @default(autoincrement())
  content   String
  sentAt    DateTime @default(now())

  senderId Int
  sender   User @relation("UserMessages", fields: [senderId], references: [userId])

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [chatId])
}
